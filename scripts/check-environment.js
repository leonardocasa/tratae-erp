#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Verificando ambiente TRATAE ERP...\n');

// Verificar vers√µes das ferramentas
function checkVersion(tool, command) {
  try {
    const version = execSync(command, { encoding: 'utf8' }).trim();
    console.log(`‚úÖ ${tool}: ${version}`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${tool}: N√£o encontrado`);
    return false;
  }
}

// Verificar se as pastas existem
function checkDirectories() {
  const requiredDirs = ['frontend', 'backend', 'database', 'docs'];
  console.log('\nüìÅ Verificando estrutura de pastas:');
  
  requiredDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
      console.log(`‚úÖ ${dir}/`);
    } else {
      console.log(`‚ùå ${dir}/ - Pasta n√£o encontrada`);
    }
  });
}

// Verificar arquivos de configura√ß√£o
function checkConfigFiles() {
  const requiredFiles = [
    'package.json',
    'frontend/package.json',
    'backend/package.json',
    'frontend/.env.example',
    'backend/.env.example'
  ];
  
  console.log('\nüìÑ Verificando arquivos de configura√ß√£o:');
  
  requiredFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file}`);
    } else {
      console.log(`‚ùå ${file} - Arquivo n√£o encontrado`);
    }
  });
}

// Verificar depend√™ncias instaladas
function checkDependencies() {
  console.log('\nüì¶ Verificando depend√™ncias:');
  
  try {
    const rootPackage = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (rootPackage.dependencies || rootPackage.devDependencies) {
      console.log('‚úÖ package.json principal configurado');
    }
  } catch (error) {
    console.log('‚ùå package.json principal n√£o encontrado ou inv√°lido');
  }
  
  if (fs.existsSync('frontend/package.json')) {
    console.log('‚úÖ Frontend package.json encontrado');
  }
  
  if (fs.existsSync('backend/package.json')) {
    console.log('‚úÖ Backend package.json encontrado');
  }
}

// Verificar conectividade com APIs externas
async function checkExternalAPIs() {
  console.log('\nüåê Verificando conectividade com APIs externas:');
  
  try {
    const https = require('https');
    
    // Testar conectividade com ReceitaWS
    const testReceitaWS = () => {
      return new Promise((resolve) => {
        const req = https.get('https://receitaws.com.br', (res) => {
          if (res.statusCode === 200) {
            console.log('‚úÖ ReceitaWS: Acess√≠vel');
            resolve(true);
          } else {
            console.log('‚ö†Ô∏è ReceitaWS: Status inesperado');
            resolve(false);
          }
        });
        
        req.on('error', () => {
          console.log('‚ùå ReceitaWS: N√£o acess√≠vel');
          resolve(false);
        });
        
        req.setTimeout(5000, () => {
          console.log('‚è∞ ReceitaWS: Timeout');
          resolve(false);
        });
      });
    };
    
    await testReceitaWS();
  } catch (error) {
    console.log('‚ùå Erro ao verificar APIs externas');
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('='.repeat(50));
  console.log('üîß VERIFICA√á√ÉO DE AMBIENTE TRATAE ERP');
  console.log('='.repeat(50));
  
  // Verificar vers√µes
  console.log('\nüõ†Ô∏è Verificando vers√µes das ferramentas:');
  checkVersion('Node.js', 'node --version');
  checkVersion('npm', 'npm --version');
  checkVersion('Yarn', 'yarn --version');
  
  // Verificar estrutura
  checkDirectories();
  checkConfigFiles();
  checkDependencies();
  
  // Verificar APIs
  await checkExternalAPIs();
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ Verifica√ß√£o conclu√≠da!');
  console.log('='.repeat(50));
  
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Configure as vari√°veis de ambiente (.env)');
  console.log('2. Execute: yarn install:all');
  console.log('3. Execute: yarn dev');
  console.log('\nüöÄ Sistema pronto para desenvolvimento!');
}

// Executar verifica√ß√£o
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };
